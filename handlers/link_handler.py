from aiogram import Router, F
from aiogram.types import Message, FSInputFile
import os
import logging
from .media_processing import download_media
from bot_instance import bot


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

router = Router()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫
LINK_FILTER = F.text.regexp(
    r"(https?://(?:www\.)?(?:soundcloud\.com/[\w-]+/[\w-]+|youtube\.com/watch\?v=|youtu\.be/|tiktok\.com/.*?/video/|instagram\.com/reel/[\w-]+))"
)

@router.message(LINK_FILTER)
async def handle_media_links(msg: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ SoundCloud –∏ YouTube."""
    url = msg.text
    output_path = "temp"

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if "soundcloud.com" in url:
            await process_soundcloud(url, msg, output_path)
        elif "youtube.com" in url or "youtu.be" in url:
            await process_youtube(url, msg, output_path)
        elif "tiktok.com" in url:
            await process_tiktok(url, msg, output_path)
        elif "instagram.com/reel" in url:
            await process_instagram(url, msg, output_path)
        else:
            await msg.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def process_soundcloud(url: str, msg: Message, output_path: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ SoundCloud."""
    await msg.answer("üéß –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ...")
    try:
        filename, info = await download_media(url, output_path, is_audio=True)
        audio_path = filename.replace('.webm', '.mp3').replace('.m4a', '.mp3')
        await send_audio(msg, audio_path, info)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SoundCloud: {str(e)}")

async def process_youtube(url: str, msg: Message, output_path: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ YouTube."""
    await msg.answer("‚è¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
    try:
        filename, info = await download_media(url, output_path)
        video_path = filename.replace('.webm', '.mp4')
        await send_video(msg, video_path, info)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube: {str(e)}")

async def process_tiktok(url: str, msg: Message, output_path: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ TikTok."""
    await msg.answer("üéµ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É TikTok...")
    try:
        filename, info = await download_media(url, output_path)
        video_path = filename.replace('.webm', '.mp4')
        await send_video(msg, video_path, info)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TikTok: {str(e)}")

async def process_instagram(url: str, msg: Message, output_path: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ Instagram Reels."""
    await msg.answer("üì∏ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É Instagram Reels...")
    try:
        filename, info = await download_media(url, output_path)
        video_path = filename.replace('.webm', '.mp4')
        await send_video(msg, video_path, info)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Instagram: {str(e)}")


async def send_audio(msg: Message, path: str, info: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Telegram."""
    if not os.path.exists(path):
        await msg.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    file_size = os.path.getsize(path)
    if file_size > 50 * 1024 * 1024:
        await msg.answer("‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë")
        os.remove(path)
        return

    try:
        await msg.answer(f"‚úÖ {info['title']}")
        await bot.send_audio(
            chat_id=msg.chat.id,
            audio=FSInputFile(path),
            title=info['title'][:64],
            performer=info.get('uploader', 'Unknown Artist')[:64]
        )
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {str(e)}")
    finally:
        if os.path.exists(path):
            os.remove(path)

async def send_video(msg: Message, path: str, info: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ Telegram."""
    if not os.path.exists(path):
        await msg.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    file_size = os.path.getsize(path)
    if file_size > 50 * 1024 * 1024:
        await msg.answer("‚ùå –í–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë")
        os.remove(path)
        return

    try:
        duration = int(info.get('duration', 0))

        await msg.answer(f"‚úÖ {info['title']}")
        await bot.send_video(
            chat_id=msg.chat.id,
            video=FSInputFile(path),
            duration=duration,
        )
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    finally:
        try:
            if os.path.exists(path):
                os.remove(path)
                logging.info(f"–§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        except OSError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")